<%- include('../Layout/usertem.ejs') %>
<%- include ("../layout/cdn")%>
<%- include ("../layout/userHeader.ejs")%>

<main class="main">
  <div class="page-header breadcrumb-wrap">
    <div class="container">
      <div class="breadcrumb">
        <a href="index.html" rel="nofollow">Home</a>
        <span></span> Pages
        <span></span> Account
        <span style="color: #395ae0;">ACCOUNT DETAILS</span>
      </div>
    </div>
  </div>

  <section class="pt-50 pb-50">
    <div class="container">
      <div class="row">
        <div class="col-lg-10 m-auto">
          <div class="row">
            <%- include ("../layout/accountSideBar")%>
            <div class="col-md-8">
              <div class="card">
                <div class="card-header">
                  <h5>Edit Details</h5>
                </div>
                <div class="card-body">
                  <form id="editProfileForm" novalidate>
                    <div class="row">
                      <div class="form-group col-md-12">
                        <label>Full Name <span class="required">*</span></label>
                        <input id="name" class="form-control square" name="fullName" value="<%=user?.fullName%>" type="text">
                        <div id="nameError" class="error-message text-danger mt-1"></div>
                      </div>

                      <div class="form-group col-md-12">
                        <label>Email Address <span class="required">*</span></label>
                        <input id="email" class="form-control square" name="email" value="<%=user?.email%>" type="email">
                        <div id="emailError" class="error-message text-danger mt-1"></div>
                      </div>

                      <div class="form-group col-md-12">
                        <label>Phone Number <span class="required">*</span></label>
                        <input class="form-control" id="phoneNumber" type="tel" name="phoneNumber" value="<%= user?.phoneNumber %>">
                        <div id="phoneError" class="error-message text-danger mt-1"></div>
                      </div>

                      <div class="col-md-12 mt-3">
                        <button type="submit" class="btn btn-fill-out submit" id="submitBtn">
                          Save Changes
                        </button>
                        <div id="formError" class="error-message text-danger mt-2"></div>
                        <div id="formSuccess" class="success-message text-success mt-2"></div>
                      </div>
                    </div>
                  </form>
                  <div class="mt-3">
                    <small><a href="/forgotPasswordEmail">Forgot password?</a></small>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  </section>
</main>

<script>
document.addEventListener('DOMContentLoaded', () => {
  const form = document.getElementById('editProfileForm');
  const submitBtn = document.getElementById('submitBtn');
  
  // Validation rules
  const validators = {
    name: {
      element: document.getElementById('name'),
      errorElement: document.getElementById('nameError'),
      validate: (value) => {
        const trimmed = value.trim();
        if (!trimmed) return 'Name is required';
        if (trimmed.length < 3) return 'Name must be at least 3 characters';
        if (trimmed.length > 50) return 'Name must be less than 50 characters';
        if (!/^[A-Za-z\s]+$/.test(trimmed)) return 'Name can only contain letters and spaces';
        return null;
      }
    },
    email: {
      element: document.getElementById('email'),
      errorElement: document.getElementById('emailError'),
      validate: (value) => {
        const trimmed = value.trim();
        if (!trimmed) return 'Email is required';
        if (!/^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$/.test(trimmed)) {
          return 'Please enter a valid email address';
        }
        return null;
      }
    },
    phone: {
      element: document.getElementById('phoneNumber'),
      errorElement: document.getElementById('phoneError'),
      validate: (value) => {
        const trimmed = value.trim();
        if (!trimmed) return 'Phone number is required';
        if (!/^[1-9]\d{9}$/.test(trimmed)) {
          return 'Please enter a valid 10-digit phone number starting with 1-9';
        }
        if (/^(\d)\1{9}$/.test(trimmed)) {
          return 'Invalid phone number - cannot be all same digits';
        }
        return null;
      }
    }
  };

  // Add input event listeners for real-time validation
  Object.entries(validators).forEach(([key, validator]) => {
    validator.element.addEventListener('input', () => {
      validateField(key);
      updateSubmitButton();
    });
  });

  function validateField(fieldName) {
    const validator = validators[fieldName];
    const error = validator.validate(validator.element.value);
    validator.errorElement.textContent = error || '';
    return !error;
  }

  function validateForm() {
    let isValid = true;
    Object.keys(validators).forEach(fieldName => {
      if (!validateField(fieldName)) {
        isValid = false;
      }
    });
    return isValid;
  }

  function updateSubmitButton() {
    submitBtn.disabled = !validateForm();
  }

  // Form submission handler
  form.addEventListener('submit', async (e) => {
    e.preventDefault();
    
    const formError = document.getElementById('formError');
    const formSuccess = document.getElementById('formSuccess');
    formError.textContent = '';
    formSuccess.textContent = '';

    if (!validateForm()) {
      formError.textContent = 'Please fix the errors before submitting.';
      return;
    }

    submitBtn.disabled = true;
    submitBtn.innerHTML = '<span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span> Saving...';

    try {
      const formData = {
        fullName: validators.name.element.value.trim(),
        email: validators.email.element.value.trim(),
        phoneNumber: validators.phone.element.value.trim()
      };

      const response = await fetch('/editprofile', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify(formData)
      });

      const data = await response.json();

      if (!response.ok) {
        throw new Error(data.message || 'Failed to update profile');
      }

      formSuccess.textContent = 'Profile updated successfully!';
      
      // Optional: Redirect after success
      setTimeout(() => {
        window.location.href = '/useraccount'; // Adjust the redirect URL as needed
      }, 1500);

    } catch (error) {
      formError.textContent = error.message || 'An error occurred while updating your profile';
    } finally {
      submitBtn.disabled = false;
      submitBtn.innerHTML = 'Save Changes';
    }
  });

  // Initial validation on page load
  updateSubmitButton();
});
</script>