<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Offer Management</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css" rel="stylesheet">
    <link href="https://cdn.jsdelivr.net/npm/sweetalert2@11.7.32/dist/sweetalert2.min.css" rel="stylesheet">
    <%- include ("../layout/admintemHeader") %>
    <style>
        body {
            background-color: #f8f9fa;
        }

        .main-title {
            color: #2c3e50;
            margin-bottom: 1.5rem;
            font-weight: 600;
        }

        .card {
            border: none;
            box-shadow: 0 0 15px rgba(0,0,0,0.1);
            border-radius: 12px;
        }

        .form-section, .table-section {
            background-color: white;
            padding: 1.5rem;
            border-radius: 12px;
            height: 100%;
            box-shadow: 0 0 15px rgba(0,0,0,0.1);
        }

        .form-group {
            margin-bottom: 1.2rem;
        }

        .form-group label {
            font-weight: 500;
            color: #34495e;
            margin-bottom: 0.5rem;
        }

        .form-control, .form-select {
            border-radius: 8px;
            border: 1px solid #dce4ec;
            padding: 0.6rem;
            transition: all 0.3s ease;
        }

        .form-control:focus, .form-select:focus {
            border-color: #3498db;
            box-shadow: 0 0 0 0.2rem rgba(52,152,219,0.25);
        }

        .btn-primary {
            background-color: #3498db;
            border: none;
            border-radius: 8px;
            padding: 0.6rem 1.5rem;
            font-weight: 500;
            transition: all 0.3s ease;
        }

        .btn-primary:hover {
            background-color: #2980b9;
            transform: translateY(-1px);
        }

        .error-message {
            color: #e74c3c;
            font-size: 0.875rem;
            margin-top: 0.3rem;
        }

        .table thead th {
            background-color: #f8f9fa;
            color: #2c3e50;
            font-weight: 600;
            border-bottom: 2px solid #dce4ec;
        }

        .pagination {
            margin-top: 2rem;
            gap: 0.5rem;
            justify-content: center;
        }

        .pagination a {
            padding: 0.5rem 1rem;
            border-radius: 6px;
            color: #3498db;
            background-color: white;
            border: 1px solid #dce4ec;
            text-decoration: none;
            transition: all 0.3s ease;
        }

        .pagination a.active {
            background-color: #3498db;
            color: white;
            font-weight: bold;
        }
    </style>
</head>
<body>
    <div class="container mt-4">
        <h2 class="main-title">Offer Management</h2>
        <div class="row">
            <!-- Create Offer Form -->
            <div class="col-md-4">
                <div class="form-section">
                    <form id="offerForm" action="/admin/offer" method="POST" >
                        <div class="form-group">
                            <label for="offerType">Offer Type</label>
                            <select class="form-select" name="type" id="offerType" >
                                <option value="">Select Type</option>
                                <option value="Products">Product</option>
                                <option value="Category">Category</option>
                            </select>
                            <div class="error-message" id="offerTypeError"></div>
                        </div>

                        <div class="form-group" id="productSelect" style="display: none;">
                            <label for="productId">Select Product</label>
                            <select class="form-select" name="productId" id="productId">
                                <option value="">Select Product</option>
                                <% product.forEach(p => { %>
                                    <option value="<%= p._id %>"><%= p.name %></option>
                                <% }) %>
                            </select>
                            <div class="error-message" id="productId"></div>
                        </div>

                        <div class="form-group" id="categorySelect" style="display: none;">
                            <label for="categoryId">Select Category</label>
                            <select class="form-select" name="categoryId" id="categoryId">
                                <option value="">Select Category</option>
                                <% category.forEach(c => { %>
                                    <option value="<%= c._id %>"><%= c.name %></option>
                                <% }) %>
                            </select>
                            <div class="error-message" id="categoryId"></div>
                        </div>

                        <div class="form-group">
                            <label for="name">Offer Name</label>
                            <input type="text" class="form-control" id="name" name="name" >
                            <div class="error-message" id="nameError"></div>
                        </div>

                        <div class="form-group">
                            <label for="description">Offer Description</label>
                            <textarea class="form-control" id="description" name="description" rows="3" ></textarea>
                            <div class="error-message" id="descriptionError"></div>
                        </div>

                        <div class="form-group">
                            <label for="ValidFrom">ValidFrom</label>
                            <input type="date" class="form-control" id="ValidFrom" name="validFrom" >
                            <div class="error-message" id="ValidFromError"></div>
                        </div>
                        <div class="form-group">
                            <label for="Validity">Validity</label>
                            <input type="date" class="form-control" id="Validity" name="validity" >
                            <div class="error-message" id="ValidityError"></div>
                        </div>

                        <div class="form-group">
                            <label for="offerPencentage">Offer Percentage</label>
                            <input type="number" class="form-control" id="offerPercentage" name="offerPercentage" min="0" step="1" max="100" >
                            <div class="error-message" id="offerPercentageError"></div>
                        </div>

                       
                        

                        <button type="submit" class="btn btn-primary w-100 mb-3">Create Offer</button>
                        
                    </form>
                    <a href="/admin/dashboard" class="btn btn-secondary w-100">Go Back</a>
                </div>
            </div>

            <!-- Offers List -->
            <div class="col-md-8">
                <div class="table-section">
                    <h3 class="section-title">Active Offers</h3>
                    <% if(offers.length === 0) { %>
                        <div class="alert alert-info">No offers found.</div>
                    <% } else { %>
                        <div class="table-responsive">
                            <table class="table table-hover">
                                <thead>
                                    <tr>
                                        <th>Name</th>
                                        <th>Type</th>
                                        <th>Item</th>
                                        
                                        <th>ValidFrom</th>
                                        <th>ValidTo</th>
                                        <th>Offer Percentage</th>
                                        
                                        <th>Status</th>
                                        <th>Actions</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    <% offers.forEach(offer => { %>
                                        <tr>
                                            <td><%= offer.name %></td>
                                            <td><%= offer.type %></td>
                                            <td>
                                                <% if (offer.type === 'Products') { %>
                                                    <%= offer.productId ? offer.productId.name : 'N/A' %>
                                                <% } else { %>
                                                    <%= offer.categoryId ? offer.categoryId.name : 'N/A' %>
                                                <% } %>
                                            </td>
                                           
                                            <td><%= new Date(offer.validFrom).toLocaleDateString() %></td>
                                            <td><%= new Date(offer.validity).toLocaleDateString() %></td>
                                            <td><%= offer.offerPercentage %> %</td>
                                            
                                            <td>
                                                <span class="badge <%= new Date(offer.validity) > new Date() && offer.status ? 'bg-success' : 'bg-danger' %>">
                                                    <%= new Date(offer.validity) > new Date() && offer.status  ? 'Active' : 'Expired' %>
                                                </span>
                                            </td>
                                            <td>
                                                <% if (offer.status){%>
                                                <button class="btn btn-danger btn-sm" onclick="deactivateOffer('<%= offer._id %>')">
                                                    Deactivate
                                                 </button>
                                               
                                                <% }else{// remove the action and method from the form and the a tag from the button %>
                                                    <button class="btn btn-success btn-sm" onclick="activateOffer('<%= offer._id %>')">
                                                        Activate
                                                     </button>
                                                <%}%>
                                              
                                                <button class="btn btn-danger btn-sm" onclick="deleteOffer('<%= offer._id %>')">
                                                    Delete
                                                </button>
                                            </td>
                                        </tr>
                                    <% }) %>
                                </tbody>
                            </table>
                        </div>

                        <!-- Pagination -->
                        <% if (totalPages > 1) { %>
                            <div class="pagination">
                                <% if (currentPage > 1) { %>
                                    <a href="?page=<%= currentPage - 1 %>">Previous</a>
                                <% } %>

                                <% for (let i = 1; i <= totalPages; i++) { %>
                                    <a href="?page=<%= i %>" class="<%= currentPage === i ? 'active' : '' %>">
                                        <%= i %>
                                    </a>
                                <% } %>

                                <% if (currentPage < totalPages) { %>
                                    <a href="?page=<%= currentPage + 1 %>">Next</a>
                                <% } %>
                            </div>
                        <% } %>
                    <% } %>
                </div>
            </div>
        </div>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11.7.32/dist/sweetalert2.all.min.js"></script>
    <script>

const form = document.getElementById('offerForm');

form.addEventListener('submit', function(e) {
    e.preventDefault();
    if (validateForm()) {
        this.submit();
    }
});

function validateForm() {
    let isValid = true;
    const name = document.getElementById('name');
    const description = document.getElementById('description');
    const validFrom = document.getElementById('ValidFrom');
    const validity = document.getElementById('Validity');
    const offerPercentage = document.getElementById('offerPercentage');
    const offerType = document.getElementById('offerType');
    const productId = document.getElementById('productId');
    const categoryId = document.getElementById('categoryId');

    // Clear previous errors
    clearErrors();

    // Validate offer type
    if (!offerType.value) {
        showError('offerType', 'Please select an offer type');
        isValid = false;
    }

    // Validate name
    if (name.value.trim().length < 3) {
        showError('name', 'Name must be at least 3 characters long');
        isValid = false;
    }

    // Validate description
    if (description.value.trim().length < 10) {
        showError('description', 'Description must be at least 10 characters long');
        isValid = false;
    }

    // Validate ValidFrom
    const today = new Date();
    today.setHours(0, 0, 0, 0);
    const validFromDate = new Date(validFrom.value);
    if (!validFrom.value || validFromDate < today) {
        showError('ValidFrom', 'Valid From date must be in the future');
        isValid = false;
    }

    // Validate Validity
    const validityDate = new Date(validity.value);
    if (!validity.value || validityDate <= validFromDate) {
        showError('Validity', 'Validity date must be after the Valid From date');
        isValid = false;
    }

    // Validate offer percentage
    const offerPercentageValue = parseFloat(offerPercentage.value);
    if (isNaN(offerPercentageValue) || offerPercentageValue < 0 || offerPercentageValue > 100) {
        showError('offerPercentage', 'Offer Percentage must be between 0 and 100');
        isValid = false;
    }

    // Validate product or category selection
    if (offerType.value === 'Products' && !productId.value) {
        showError('productId', 'Please select a product');
        isValid = false;
    } else if (offerType.value === 'Category' && !categoryId.value) {
        showError('categoryId', 'Please select a category');
        isValid = false;
    }

    return isValid;
}

function showError(fieldId, message) {
    const errorDiv = document.getElementById(fieldId + 'Error');
    if (errorDiv) {
        errorDiv.textContent = message;
        document.getElementById(fieldId).classList.add('is-invalid');
    }
}

function clearErrors() {
    document.querySelectorAll('.error-message').forEach(div => div.textContent = '');
    document.querySelectorAll('.form-control, .form-select').forEach(input => input.classList.remove('is-invalid'));
}
        // Show/hide product or category select based on type
        document.getElementById('offerType').addEventListener('change', function() {
            const productSelect = document.getElementById('productSelect');
            const categorySelect = document.getElementById('categorySelect');
            const productId = document.getElementById('productId');
            const categoryId = document.getElementById('categoryId');
            
            if (this.value === 'Products') {
                productSelect.style.display = 'block';
                categorySelect.style.display = 'none';
                productId.required = true;
                categoryId.required = false;
            } else if (this.value === 'Category') {
                productSelect.style.display = 'none';
                categorySelect.style.display = 'block';
                productId.required = false;
                categoryId.required = true;
            } else {
                productSelect.style.display = 'none';
                categorySelect.style.display = 'none';
                productId.required = false;
                categoryId.required = false;
            }
        });

        // Form validation
        //const form = document.getElementById('offerForm');
        
        // form.addEventListener('submit', function(e) {
        //     e.preventDefault();
        //     if (validateForm()) {
        //         this.submit();
        //     }
        // });

        // function validateForm() {
        //     let isValid = true;
        //     const name = document.getElementById('name');
        //     const description = document.getElementById('description');
        //     const expireOn = document.getElementById('expireOn');
        //     const offerPrice = document.getElementById('offerPrice');
        //     const minimumPrice = document.getElementById('minimumPrice');
        //     const offerType = document.getElementById('offerType');

        //     // Clear previous errors
        //     clearErrors();

        //     // Validate offer type
        //     if (!offerType.value) {
        //         showError('offerType', 'Please select an offer type');
        //         isValid = false;
        //     }

        //     // Validate name
        //     if (name.value.trim().length < 3) {
        //         showError('name', 'Name must be at least 3 characters long');
        //         isValid = false;
        //     }

        //     // Validate description
        //     if (description.value.trim().length < 10) {
        //         showError('description', 'Description must be at least 10 characters long');
        //         isValid = false;
        //     }

        //     // Validate expiry date
        //     const today = new Date();
        //     today.setHours(0, 0, 0, 0);
        //     const expiryDate = new Date(expireOn.value);
        //     if (!expireOn.value || expiryDate < today) {
        //         showError('expireOn', 'Expiry date must be in the future');
        //         isValid = false;
        //     }

        //     // Validate prices
        //     const offerPriceValue = parseFloat(offerPrice.value);
        //     const minimumPriceValue = parseFloat(minimumPrice.value);

        //     if (isNaN(offerPriceValue) || offerPriceValue <= 0) {
        //         showError('offerPrice', 'Offer price must be greater than 0');
        //         isValid = false;
        //     }

        //     if (isNaN(minimumPriceValue) || minimumPriceValue <= offerPriceValue) {
        //         showError('minimumPrice', 'Minimum price must be greater than offer price');
        //         isValid = false;
        //     }

        //     return isValid;
        // }

        // function showError(fieldId, message) {
        //     const errorDiv = document.getElementById(fieldId + 'Error');
        //     if (errorDiv) {
        //         errorDiv.textContent = message;
        //         document.getElementById(fieldId).classList.add('is-invalid');
        //     }
        // }

        // function clearErrors() {
        //     document.querySelectorAll('.error-message').forEach(div => div.textContent = '');
        //     document.querySelectorAll('.form-control, .form-select').forEach(input => input.classList.remove('is-invalid'));
        // }

        // Activation
        async function activateOffer(offerId) {
            try {
                const result = await Swal.fire({
                    title: 'Activate Offer',
                    text: 'Are you sure you want to activate this offer?',
                    icon: 'warning',
                    showCancelButton: true,
                    confirmButtonColor: '#d33',
                    cancelButtonColor: '#3085d6',
                    confirmButtonText: 'Yes, Activate it!'
                });

                if (result.isConfirmed) {
                    const response = await fetch(`/admin/activateoffer/${offerId}`, {
                        method: 'GET',
                        headers: {
                            'Content-Type': 'application/json'
                        }
                    });

                    if (response.ok) {
                        await Swal.fire('Activated!', 'Offer has been Activated.', 'success');
                        location.reload();
                    } else {
                        throw new Error('Failed to Activate offer');
                    }
                }
            } catch (error) {
                Swal.fire('Error', error.message, 'error');
            }
        }
        // Deactivation
        async function deactivateOffer(offerId) {
            try {
                const result = await Swal.fire({
                    title: 'Deactivate Offer',
                    text: 'Are you sure you want to deactivate this offer?',
                    icon: 'warning',
                    showCancelButton: true,
                    confirmButtonColor: '#d33',
                    cancelButtonColor: '#3085d6',
                    confirmButtonText: 'Yes, deactivate it!'
                });

                if (result.isConfirmed) {
                    const response = await fetch(`/admin/deactivateoffer/${offerId}`, {
                        method: 'GET',
                        headers: {
                            'Content-Type': 'application/json'
                        }
                    });

                    if (response.ok) {
                        await Swal.fire('Deactivated!', 'Offer has been deactivated.', 'success');
                        location.reload();
                    } else {
                        throw new Error('Failed to deactivate offer');
                    }
                }
            } catch (error) {
                Swal.fire('Error', error.message, 'error');
            }
        }
        // Delete offer function
        async function deleteOffer(offerId) {
            try {
                const result = await Swal.fire({
                    title: 'Delete Offer',
                    text: 'Are you sure you want to delete this offer?',
                    icon: 'warning',
                    showCancelButton: true,
                    confirmButtonColor: '#d33',
                    cancelButtonColor: '#3085d6',
                    confirmButtonText: 'Yes, delete it!'
                });

                if (result.isConfirmed) {
                    const response = await fetch(`/admin/offer?offerId=${offerId}`, {
                        method: 'DELETE',//both params and query make it one
                        headers: {
                            'Content-Type': 'application/json'
                        }
                    });

                    if (response.ok) {
                        await Swal.fire('Deleted!', 'Offer has been deleted.', 'success');
                        location.reload();
                    } else {
                        throw new Error('Failed to delete offer');
                    }
                }
            } catch (error) {
                Swal.fire('Error', error.message, 'error');
            }
        }
    </script>
</body>
</html>